name: Run Tests
on:
  push:
    branches: [ master ]

jobs:
  tests:
    name: Run Tests
    runs-on: macos-latest

    env:
      # certificate 
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/dev_cntr_cert.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/dev_cntr_cert.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERTIFICATES_P12_PASSWORD }} # gpg로 파일 암호화할 때 사용한 암호

      # certification export key
      CERT_EXPORT_KEY: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      KEYCHAIN: ${{ 'test.keychain' }}

    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Keychain 
        # 키체인 초기화 - 임시 키체인 생성
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings



      - name : Configure Code Signing
        run: |
          # certificate 복호화
          gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
                    
          # security를 사용하여 인증서와 개인 키를 새로 만든 키 체인으로 가져옴
          security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
          # Xcode에서 찾을 수 있는 프로비저닝 프로필 설치하기 위해 우선 프로비저닝 디렉토리를 생성
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          # 디버깅 용 echo 명령어
          echo `ls .github/*.mobileprovision`
            # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
            for PROVISION in `ls .github/*.mobileprovision`
            do
              UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done

      - name: Run Tests
        run: |
          xcodebuild -scheme "actionTest"  -resultBundlePath TestResults
          
      - uses: kishikawakatsumi/xcresulttool@v1
        with:
          path: TestResults.xcresult
          token: ${{ secrets.GIT_TOKEN }}
        if: success() || failure()

      - uses: tbartelmess/analyze-xcoderesults-action@0.1.0
        if: always()
        with: 
          results: TestResults.xcresult
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
